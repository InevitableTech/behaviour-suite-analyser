#!/usr/bin/env php
<?php

// 1. Load folder and find files of type .feature
// 2. Store each step used
// 3. Store scenarios with titles and line number.
// 5. Define hooks.
// 6. Check background length.
// 7. Send report to live server, show local report.

use Forceedge01\BDDStaticAnalyser\Processor;
use Forceedge01\BDDStaticAnalyser\Entities;

//Config
// $autoloadFile = __DIR__ . '/../autoload.php';

// if (is_file($autoloadFile)) {
//     // We're being used as a composer package.
//     require $autoloadFile;
// } else {
//     // we're in development mode.
//     require __DIR__ . '/../vendor/autoload.php';
// }

include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';

function isFeatureFile($file) {
	if (is_file($file) && has_extension($file, $feature_file_extension)) {
		return true;
	}
}

function getAllFeatureFiles(string $directory, string $feature_file_extension) {
    $files = scandir($directory);
    $features = [];
    foreach ($files as $file) {
        $dirPath = $directory . DIRECTORY_SEPARATOR . $file;
        if (is_dir($dirPath) && ($file != '.' && $file != '..')) {
            // echo $dirPath . PHP_EOL;
        	$features = array_merge($features, getAllFeatureFiles($dirPath, $feature_file_extension));
        } else if (strpos($file, '.' . $feature_file_extension) !== false) {
            // echo $file . PHP_EOL;
            $features[] = $directory . DIRECTORY_SEPARATOR . $file;
        }
    }

    return $features;
}

function helpMenu(array $options) {
    echo 'Help menu' . PHP_EOL;
    echo '----' . PHP_EOL;
    foreach ($options as $option => $description) {
        echo '-' . rtrim($option,':') . '     ' . $description . PHP_EOL;
    }

    echo PHP_EOL;
}

echo '<===== Behaviour Automation Suite Analayser =====>' . PHP_EOL . PHP_EOL;

try {
    $options = [
        'd:' => 'Directory to scan for feature files',
        's::' => 'Severities to report (Default: 0,1,2,3,4)',
        'c::' => 'Path to config file',
        'h::' => 'This menu',
        'v::' => 'Verbose and debug'
    ];

    $input = getopt(implode('', array_keys($options)));

    $path = isset($input['d']) ? $input['d'] : '';
    $severities = isset($input['s']) ? $input['s'] : '0,1,2,3,4';
    $configFile = isset($input['c']) ? realpath($input['c']) : __DIR__ . '/../config.php';

    if (isset($input['h'])) {
        helpMenu($options);
        exit;
    }

    if (! is_file($configFile)) {
        throw new Exception("Config file path '{$input['c']}' is not recognised as a valid file path.");
    }

    $config = new Entities\Config(include $configFile);
    $dirToScan = realpath($path);
    $displayProcessorClass = $config->get('display_processor');
    $displayProcessor = new $displayProcessorClass();
    $displayProcessor->inputSummary($path, $severities, $configFile, $dirToScan);
    $severities = explode(',' , $severities);

    if (! $dirToScan || ! is_dir($dirToScan)) {
        throw new Exception("-d param (provided: '$path') must point to the folder where feature files are stored.");
    }

    $featureFileProcessor = new Processor\FeatureFileProcessor();
    $rulesProcessor = new Processor\RulesProcessor($config->get('rules'));
    $files = getAllFeatureFiles($dirToScan, $config->get('feature_file_extension'));
    $outcomeCollection = new Entities\OutcomeCollection();

    if (! $files) {
        throw new Exception("No feature files found in path '$dirToScan'");
    }

    foreach ($files as $file) {
        $fileContents = $featureFileProcessor->getFileContent($file);

        if (isset($input['v'])) {
            print_r($fileContents);
        }

    	$rulesProcessor->applyRules($fileContents, $outcomeCollection);
    }

    if (isset($input['v'])) {
        print_r($outcomeCollection);
    }

    $displayProcessor->displayOutcomes($outcomeCollection, $severities);
    $reportProcessorClass = $config->get('report_processor');
    $reportProcessor = new $reportProcessorClass(new Processor\HtmlProcessor(), $featureFileProcessor);
    $reportPath = __DIR__ . '/../' . $config->get('html_report_path');
    $reportPath = $reportProcessor->generate($reportPath, $severities, $outcomeCollection);
    $displayProcessor->printSummary($outcomeCollection, $reportPath);
} catch (\Exception $e) {
    echo '==> Error: ' . $e->getMessage() . PHP_EOL;
    exit;
}
